#!/usr/bin/env python3

import cv2
import fire
from dubbing_tools import *
import sys
import os
# from skimage.measure import compare_ssim as ssim
from skimage.metrics import structural_similarity as ssim
import json
from dataclasses import dataclass
from dataclasses_json import dataclass_json
import numpy


@dataclass
class Frame:
    time: int
    frame: any
    frame_number: int


def write_json(output_path: str, stills: list):
    with open(os.path.join(output_path, 'still-frames.json'), 'w') as file:
        json.dump({'stills': stills}, file, indent=2)


def cmd(video_file: str, output_path: str,
        debug: bool = False, skip: int = 20, similarity: float = 0.98, look_behind: int = 2):

    def similar(frame1: Frame, frame2: Frame) -> bool:
        return ssim(frame1.frame, frame2.frame, multichannel=True) > similarity

    if not os.path.exists(output_path):
        os.makedirs(output_path)

    capture = cv2.VideoCapture(video_file)

    frame_num = 0
    last_frame = None
    frame_start = None
    frame_end = None
    time_start = None
    time_end = None
    previous = {}  # type: dict[int, Frame]
    current = {}  # type: dict[int, Frame]
    still_frames = []
    still_images = []  # type: list[Frame]
    write_json(output_path, still_frames)

    while (True):
        success, f = capture.read()
        time = round(capture.get(cv2.CAP_PROP_POS_MSEC)/1000, 2)

        if not success:
            break

        frame = Frame(time, f, frame_num+1)
        current[frame_num] = frame

        if frame_num % skip == 0:
            # print(f'Frame: {frame_num}', file=sys.stderr)
            try:
                if last_frame is None:
                    last_frame = frame

                elif similar(frame, last_frame):
                    if frame_start is None:
                        frame_start = frame_num
                        for n in previous:
                            if similar(frame, previous[n]):
                                time_start = previous[n].time
                                frame_start = n
                                break
                        still_frames.append({
                            'frame_start': frame_start,
                            'frame_end': frame_start,
                            'time_start': time_start,
                            'time_end': time_end,
                        })

                    frame_end = frame_num
                    still_frames[-1]['frame_end'] = frame_end

                else:
                    if frame_start is not None and frame_end - frame_start >= skip:
                        for n in current:
                            if similar(last_frame, current[n]):
                                frame_end = n
                                time_end = current[n].time
                            else:
                                break

                        still_frames[-1]['frame_end'] = frame_end
                        still_frames[-1]['time_end'] = time_end

                        # check for similar still
                        image_file = None
                        for i in range(min(len(still_images), look_behind)):
                            if similar(last_frame, still_images[-i]):
                                image_file = still_frames[-i-1]['image_file']
                                break
                        if image_file is None:
                            still_images.append(last_frame)
                            image_file = f'slide-{str(len(still_images)).rjust(3, "0")}.jpg'

                        still_frames[-1]['image_file'] = image_file
                        cv2.imwrite(os.path.join(output_path, image_file), last_frame.frame)
                        write_json(output_path, still_frames)

                        frame_start = None
                        frame_end = None

            except Exception as exc:
                print(f'Frame number: {frame_num}')
                raise exc

            last_frame = frame
            previous = current
            current = {}

        frame_num += 1

        if debug and frame_num % 300 == 0:
            total_seconds = round(time, 0)
            seconds = total_seconds % 60
            seconds = int(seconds)
            minutes = (total_seconds/60) % 60
            minutes = int(minutes)
            hours = (total_seconds/(60*60)) % 24

            print("\rTime:  %d:%02d:%02d" % (hours, minutes, seconds), file=sys.stderr, end='')
            # print(f'Frame: {frame_num}, {round(time/1000,1)}', file=sys.stderr)

    capture.release()


if __name__ == "__main__":
    fire.Fire(cmd)

