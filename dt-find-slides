#!/usr/bin/env python3

import cv2
import fire
from dubbing_tools import *
import sys
import os
# from skimage.measure import compare_ssim as ssim
from skimage.metrics import structural_similarity as ssim
import json
from dataclasses import dataclass, field
from dataclasses_json import dataclass_json
import numpy
import re
import glob


@dataclass
class Frame:
    time: int
    frame: any
    frame_number: int


@dataclass_json
@dataclass
class StillData:
    frame_start: int
    frame_end: int
    time_start: float
    time_end: float
    image_file: str = None


@dataclass_json
@dataclass
class VideoData:
    video_file: str
    stills: list[StillData] = field(default_factory=list)


def cmd(
        video_file: str = None,
        output_path: str = './slides',
        verbose: bool = False,
        skip: int = 30,
        similarity: float = 0.98,
        look_behind: int = 2):

    if video_file is None:
        files = glob.glob("*-src.mp4")
        if len(files):
            files.sort()
            video_file = files[0]
        else:
            print('No video source found.', file=sys.stderr)
            exit(1)

    data = VideoData(video_file=video_file)

    def similar(frame1: Frame, frame2: Frame) -> bool:
        return ssim(frame1.frame, frame2.frame, multichannel=True) > similarity

    def write_json():
        with open(os.path.join(output_path, 'still-frames.json'), 'w') as file:
            file.write(data.to_json(indent=2, ensure_ascii=False))

    if not os.path.exists(output_path):
        os.makedirs(output_path)

    capture = cv2.VideoCapture(video_file)

    frame_num = 0
    last_frame = None
    frame_start = None
    frame_end = None
    time_start = None
    time_end = None
    previous = {}  # type: dict[int, Frame]
    current = {}  # type: dict[int, Frame]
    still_images = []  # type: list[Frame]

    write_json()

    while True:
        success, f = capture.read()
        time = round(capture.get(cv2.CAP_PROP_POS_MSEC)/1000, 2)

        if not success:
            break

        frame = Frame(time, f, frame_num+1)
        current[frame_num] = frame

        if frame_num % skip == 0:
            # print(f'Frame: {frame_num}', file=sys.stderr)
            try:
                if last_frame is None:
                    last_frame = frame

                elif similar(frame, last_frame):
                    if frame_start is None:
                        frame_start = frame_num
                        for n in previous:
                            if similar(frame, previous[n]):
                                time_start = previous[n].time
                                frame_start = n
                                break
                        data.stills.append(
                            StillData(
                                frame_start=frame_start,
                                frame_end=frame_start,
                                time_start=time_start,
                                time_end=time_end,
                            )
                        )

                    frame_end = frame_num
                    data.stills[-1].frame_end = frame_end

                else:
                    if frame_start is not None and frame_end - frame_start >= skip:
                        for n in current:
                            if similar(last_frame, current[n]):
                                frame_end = n
                                time_end = current[n].time
                            else:
                                break

                        data.stills[-1].frame_end = frame_end
                        data.stills[-1].time_end = time_end

                        # check for similar still
                        image_file = None
                        for i in range(min(len(still_images), look_behind)):
                            if similar(last_frame, still_images[-i]):
                                image_file = data.stills[-i-1].image_file
                                break
                        if image_file is None:
                            still_images.append(last_frame)
                            image_file = f'slide-{str(len(still_images)).rjust(3, "0")}.jpg'

                        data.stills[-1].image_file = image_file
                        cv2.imwrite(os.path.join(output_path, image_file), last_frame.frame)
                        write_json()

                        frame_start = None
                        frame_end = None

            except Exception as exc:
                print(f'Frame number: {frame_num}')
                raise exc

            last_frame = frame
            previous = current
            current = {}

        frame_num += 1

        if verbose and frame_num % 30 == 0:
            total_seconds = round(time, 0)
            seconds = total_seconds % 60
            seconds = int(seconds)
            minutes = (total_seconds/60) % 60
            minutes = int(minutes)
            hours = (total_seconds/(60*60)) % 24

            print("\rTime:  %d:%02d:%02d" % (hours, minutes, seconds), file=sys.stderr, end='')
            # print(f'Frame: {frame_num}, {round(time/1000,1)}', file=sys.stderr)

    if verbose:
        print(file=sys.stderr)

    capture.release()


if __name__ == "__main__":
    fire.Fire(cmd)
