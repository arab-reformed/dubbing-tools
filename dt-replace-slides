#!/usr/bin/env python3

import cv2
import fire
from dubbing_tools.transcript import *
import sys
import os
from dataclasses import dataclass, field
import glob
from dubbing_tools.videodata import StillData, VideoData
from typing import Optional
from moviepy.editor import VideoFileClip, ImageClip, CompositeVideoClip


@dataclass
class Frame:
    time: int
    frame: any
    frame_number: int


def cmd(
        source_video: str = None,
        output_video: str = 'output.mp4',
        slides_path: str = './slides',
        arabic_slides_path: str = './arabic-slides',
        pp: bool = False,
        resize: bool = False,
        verbose: bool = False,
):
    """
    replace slides (still frames) in a video with images in a folder

    Replaces the still frames in a video created by xref:dt-find-slides.adoc[`dt-find-slides`].

    :param source_video: original video from which slides and timings were generated
    :param output_video: filename of the new video
    :param pp: stands for powerpoint and is used in case of using slides exported from powerpoint to adjust the naming of images
    :param slides_path: name of the directory containing images and `still-frames.json`
            generated by `dt-find-slides`
    :param arabic_slides_path: images to replace the still frames in the video.  They should have the same
            names as the images in `slides_path`
    :param resize: resize images to be the same height and width in pixels as the video
    :param verbose: print verbose information to STDERR on program operations
    """
    if source_video is None:
        files = glob.glob("*-src.mp4")
        if len(files):
            files.sort()
            source_video = files[0]
        else:
            print('No video source found.', file=sys.stderr)
            exit(1)

    video = VideoFileClip(source_video)
    video_height = video.h
    video_width = video.w

    clips = [video]

    video_data = VideoData.read(path=slides_path)

    slide_num = 0
    still_names = {}
    for still in video_data.stills:
        if still.image_file not in still_names:
            slide_num += 1
            still.slide_file = still.powerpoint_image_file(slide_num)
            still_names[still.image_file] = still.slide_file
        else:
            still.slide_file = still_names[still.image_file]

        # continue
        # image = ImageClip(os.path.join(arabic_slides_path, still.powerpoint_image_file())) \
        #     .set_start(still.time_start) \
        #     .set_duration(still.duration()) \
        #     .set_pos(("center", "center"))
        image = ImageClip(os.path.join(arabic_slides_path, still.slide_file)) \
            .set_start(still.time_start) \
            .set_duration(still.duration()) \
            .set_pos(("center", "center"))

        if image.h != video.h or image.w != video.w:
            if resize:
                # print(f'Resizing {still.powerpoint_image_file()} from {image.w}x{image.h} --> {video.w}x{video.h}', file=sys.stderr)
                print(f'Resizing {still.slide_file} from {image.w}x{image.h} --> {video.w}x{video.h}', file=sys.stderr)
                image = image.resize(height=video.h, width=video.w)
            else:
                # print(f'{still.powerpoint_image_file()} size ({image.w}x{image.h}) differs from video ({video.w}x{video.h})', file=sys.stderr)
                print(f'{still.slide_file} size ({image.w}x{image.h}) differs from video ({video.w}x{video.h})', file=sys.stderr)
                exit(1)

        clips.append(image)

    # import pprint
    # pprint.pprint(video_data.stills)
    # exit(1)
    final = CompositeVideoClip(clips)
    final.write_videofile(output_video)


if __name__ == "__main__":
    fire.Fire(cmd)