#!/usr/bin/env python3
import fire
from dubbing_tools.transcript import *
from dubbing_tools.timings import Timings
import os
from ffmpeg import FFmpeg, Progress

error_output = ''


def cmd(project_path: str, subtitle_lang: str, mode: str = Timings.SOURCE, sub_type: str = 'ASS',
        include_source: bool = False, audio_lang: str = None, debug: bool = False):
    """
    burn subtitles a video

    Burns subtitles into a video using the chosen subtitle language.

    See documentation here on xref:documentation.adoc#_project_folder_structure[Project Folder Structure]
    for an explanation of

    :param project_path: path to the root of the project directory
    :param mode: one of `src`, `dub`, or `trn`.
    :param subtitle_lang: language code of the target language for subtitles
    :param sub_type: type of subtitles to be generated.  Currently `ASS` and `SRT` are accepted.
    :param audio_lang: language code of the audio (default: source audio language)
    :param include_source: display subtitles for the source language as well as the target language
    :param debug:
    """

    transcript = Transcript.load(project_path)
    if audio_lang is None:
        audio_lang = transcript.src_lang

    transcript.export_subtitles(
        audio_lang=audio_lang,
        timing_scheme=mode,
        subtitle_lang=subtitle_lang,
        sub_type=sub_type,
        include_source=include_source
    )
    source_video = transcript.video_source_fullpath(lang=audio_lang)
    if not os.path.isfile(source_video):
        print('Video source "%s" not found' % source_video, file=sys.stderr)
        exit(2)

    print(f"Subtitled video: {transcript.subtitled_video_fullpath(audio_lang, mode, subtitle_lang)}")

    mpeg = (
        FFmpeg()
            .option('y')
            .input(source_video)
            .output(
                transcript.subtitled_video_fullpath(audio_lang, mode, subtitle_lang),
                acodec='copy',
                vcodec='libx264',
                vf=f"ass={transcript.subtitles_fullpath(audio_lang, mode, subtitle_lang, sub_type.lower())}",
                crf=20
            )
    )

    @mpeg.on('start')
    def on_start(arguments):
        if debug:
            print('arguments:', arguments)

    @mpeg.on('stderr')
    def on_stderr(line):
        if debug:
            print(line, file=sys.stderr)

    @mpeg.on('progress')
    def on_progress(progress: Progress):
        print(f'\r{progress.time}, fps={progress.fps}, speed={progress.speed}', end='')

    @mpeg.on('completed')
    def on_completed():
        print('\ncompleted')

    @mpeg.on('terminated')
    def on_terminated():
        print('\nTERMINATED')

    @mpeg.on('error')
    def on_error(code):
        print('error:', code)

    mpeg.execute()


if __name__ == "__main__":
    fire.Fire(cmd)
